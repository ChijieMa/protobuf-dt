/*
 * Copyright (c) 2011 Google Inc.
 *
 * All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse
 * Public License v1.0 which accompanies this distribution, and is available at
 *
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.google.eclipse.protobuf.ui.preferences.paths;

import static com.google.eclipse.protobuf.ui.preferences.paths.Messages.*;
import static com.google.eclipse.protobuf.ui.preferences.paths.PathsPreferenceNames.*;
import static com.google.eclipse.protobuf.ui.util.Strings.CSV_PATTERN;
import static org.eclipse.core.runtime.IStatus.OK;
import static org.eclipse.xtext.util.Strings.isEmpty;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.*;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.*;
import org.eclipse.xtext.ui.editor.preferences.IPreferenceStoreAccess;

import com.google.eclipse.protobuf.ui.preferences.PreferenceAndPropertyPage;
import com.google.eclipse.protobuf.ui.util.FolderNameValidator;
import com.google.inject.Inject;

/**
 * Preference page for import paths.
 * 
 * @author alruiz@google.com (Alex Ruiz)
 */
public class PathsPreferencePage extends PreferenceAndPropertyPage {

  private static final String PREFERENCE_PAGE_ID = PathsPreferencePage.class.getName();

  private Group grpResolutionOfImported;
  private Button btnOneFolderOnly;
  private Button btnMultipleFolders;
  private Text txtFolderNames;

  @Inject private FolderNameValidator folderNameValidator;

  @Inject public PathsPreferencePage(IPreferenceStoreAccess preferenceStoreAccess) {
    super(preferenceStoreAccess);
  }

  /** {@inheritDoc} */
  @Override protected Control createContents(Composite parent) {
    // generated by WindowBuilder
    Composite contents = contentsComposite(parent);
    
    grpResolutionOfImported = new Group(contents, SWT.NONE);
    grpResolutionOfImported.setLayout(new GridLayout(1, false));
    grpResolutionOfImported.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 2, 1));
    grpResolutionOfImported.setText(importedFilesResolution);
    
    btnOneFolderOnly = new Button(grpResolutionOfImported, SWT.RADIO);
    btnOneFolderOnly.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
    btnOneFolderOnly.setText(allProtosInOneFolder);
    
    btnMultipleFolders = new Button(grpResolutionOfImported, SWT.RADIO);
    btnMultipleFolders.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
    btnMultipleFolders.setText(allProtosInMultipleFolders);
    
    txtFolderNames = new Text(grpResolutionOfImported, SWT.BORDER);
    txtFolderNames.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
    
    Label label = new Label(grpResolutionOfImported, SWT.NONE);
    label.setText(folderNameHint);
    new Label(contents, SWT.NONE);
    
    updateFromPreferenceStore();
    addEventListeners();
    
    return contents;
  }

  private void updateFromPreferenceStore() {
    IPreferenceStore store = doGetPreferenceStore();
    btnOneFolderOnly.setSelection(store.getBoolean(ALL_PROTOS_IN_ONE_FOLDER_ONLY));
    btnMultipleFolders.setSelection(store.getBoolean(PROTOS_IN_MULTIPLE_FOLDERS));
    txtFolderNames.setText(store.getString(FOLDER_NAMES));
    boolean shouldEnablePathsOptions = true;
    if (isPropertyPage()) {
      boolean useProjectSettings = store.getBoolean(ENABLE_PROJECT_SETTINGS);
      activateProjectSettings(useProjectSettings);
      shouldEnablePathsOptions = shouldEnablePathsOptions & useProjectSettings;
    }
    enableProjectOptions(shouldEnablePathsOptions);
  }

  private void addEventListeners() {
    addSelectionListener(new SelectionAdapter() {
      @Override public void widgetSelected(SelectionEvent e) {
        boolean selected = btnMultipleFolders.getSelection();
        txtFolderNames.setEnabled(selected);
        checkState();
      }
    }, btnOneFolderOnly, btnMultipleFolders);
    txtFolderNames.addModifyListener(new ModifyListener() {
      public void modifyText(ModifyEvent e) {
        checkState();
      }
    });
  }

  private void checkState() {
    if (txtFolderNames.isEnabled()) {
      String folderNames = txtFolderNames.getText().trim();
      if (isEmpty(folderNames)) {
        pageIsNowInvalid(errorNoFolderNames);
        return;
      }
      for (String folderName : folderNames.split(CSV_PATTERN)) {
        IStatus validFolderName = folderNameValidator.validateFolderName(folderName);
        if (validFolderName.getCode() != OK) {
          pageIsNowInvalid(validFolderName.getMessage());
          return;
        }
      }
    }
    pageIsNowValid();
  }
  
  /** {@inheritDoc} */
  @Override protected void onProjectSettingsActivation(boolean active) {
    enableProjectOptions(active);
  }

  @Override protected void performDefaults() {
    IPreferenceStore store = doGetPreferenceStore();
    btnOneFolderOnly.setSelection(store.getDefaultBoolean(ALL_PROTOS_IN_ONE_FOLDER_ONLY));
    btnMultipleFolders.setSelection(store.getDefaultBoolean(PROTOS_IN_MULTIPLE_FOLDERS));
    txtFolderNames.setText(store.getDefaultString(FOLDER_NAMES));
    boolean shouldEnablePathsOptions = true;
    if (isPropertyPage()) {
      boolean useProjectSettings = store.getDefaultBoolean(ENABLE_PROJECT_SETTINGS);
      activateProjectSettings(useProjectSettings);
      shouldEnablePathsOptions = shouldEnablePathsOptions & useProjectSettings;
    }
    enableProjectOptions(shouldEnablePathsOptions);
    super.performDefaults();
  }
  
  private void enableProjectOptions(boolean enabled) {
    grpResolutionOfImported.setEnabled(enabled);
    btnOneFolderOnly.setEnabled(enabled);
    btnMultipleFolders.setEnabled(enabled);
    txtFolderNames.setEnabled(btnMultipleFolders.getSelection() && enabled);
  }
  
  /** {@inheritDoc} */
  @Override protected void savePreferences() {
    IPreferenceStore store = getPreferenceStore();
    if (isPropertyPage()) store.setValue(ENABLE_PROJECT_SETTINGS, areProjectSettingsActive());
    store.setValue(ALL_PROTOS_IN_ONE_FOLDER_ONLY, btnOneFolderOnly.getSelection());
    store.setValue(PROTOS_IN_MULTIPLE_FOLDERS, btnMultipleFolders.getSelection());
    store.setValue(FOLDER_NAMES, txtFolderNames.getText().trim());
  }

  /** {@inheritDoc} */
  @Override protected String preferencePageId() {
    return PREFERENCE_PAGE_ID;
  }
}
