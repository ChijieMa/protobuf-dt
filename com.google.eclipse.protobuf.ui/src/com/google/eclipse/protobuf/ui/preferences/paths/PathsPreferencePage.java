/*
 * Copyright (c) 2011 Google Inc.
 *
 * All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse
 * Public License v1.0 which accompanies this distribution, and is available at
 *
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.google.eclipse.protobuf.ui.preferences.paths;

import static com.google.eclipse.protobuf.ui.preferences.paths.Messages.*;
import static com.google.eclipse.protobuf.ui.preferences.paths.PreferenceNames.*;
import static com.google.eclipse.protobuf.ui.swt.EventListeners.addSelectionListener;
import static java.util.Arrays.asList;
import static java.util.Collections.unmodifiableList;
import static org.eclipse.xtext.util.Strings.*;

import com.google.eclipse.protobuf.ui.preferences.*;
import com.google.inject.Inject;

import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.xtext.ui.PluginImageHelper;

import java.util.*;
import java.util.List;

/**
 * Preference page for import paths.
 *
 * @author alruiz@google.com (Alex Ruiz)
 */
public class PathsPreferencePage extends PreferenceAndPropertyPage {

  private static final String COMMA_DELIMITER = ",";
  private static final String PREFERENCE_PAGE_ID = PathsPreferencePage.class.getName();

  private Group grpResolutionOfImported;
  private Button btnOneFolderOnly;
  private Button btnMultipleFolders;
  private DirectoryPathsEditor directoryPathsEditor;

  @Inject private PluginImageHelper imageHelper;

  /** {@inheritDoc} */
  @Override protected Control createContents(Composite parent) {
    // generated by WindowBuilder
    Composite contents = new Composite(parent, NONE);
    contents.setLayout(new GridLayout(3, false));

    grpResolutionOfImported = new Group(contents, SWT.NONE);
    grpResolutionOfImported.setLayout(new GridLayout(1, false));
    grpResolutionOfImported.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 2, 1));
    grpResolutionOfImported.setText(importedFilesPathResolution);

    btnOneFolderOnly = new Button(grpResolutionOfImported, SWT.RADIO);
    btnOneFolderOnly.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
    btnOneFolderOnly.setText(filesInOneDirectoryOnly);

    btnMultipleFolders = new Button(grpResolutionOfImported, SWT.RADIO);
    btnMultipleFolders.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
    btnMultipleFolders.setText(filesInMultipleDirectories);

    directoryPathsEditor = new DirectoryPathsEditor(grpResolutionOfImported, project(), imageHelper);
    directoryPathsEditor.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
    new Label(contents, SWT.NONE);

    updateFromPreferenceStore();
    addEventListeners();

    return contents;
  }

  private void updateFromPreferenceStore() {
    IPreferenceStore store = getPreferenceStore();
    btnOneFolderOnly.setSelection(store.getBoolean(FILES_IN_ONE_DIRECTORY_ONLY));
    btnMultipleFolders.setSelection(store.getBoolean(FILES_IN_MULTIPLE_DIRECTORIES));
    setDirectoryPaths(store.getString(DIRECTORY_PATHS));
    enableProjectOptions(true);
  }

  private void addEventListeners() {
    addSelectionListener(new SelectionAdapter() {
      @Override public void widgetSelected(SelectionEvent e) {
        boolean selected = btnMultipleFolders.getSelection();
        directoryPathsEditor.setEnabled(selected);
        checkState();
      }
    }, asList(btnOneFolderOnly, btnMultipleFolders));
    directoryPathsEditor.setDataChangedListener(new DataChangedListener() {
      public void dataChanged() {
        checkState();
      }
    });
  }

  private void checkState() {
    if (directoryPathsEditor.isEnabled() && directoryPathsEditor.directoryPaths().isEmpty()) {
      pageIsNowInvalid(errorNoDirectoryNames);
      return;
    }
    pageIsNowValid();
  }

  /** {@inheritDoc} */
  @Override protected void onProjectSettingsActivation(boolean active) {
    enableProjectOptions(active);
  }

  @Override protected void performDefaults(IPreferenceStore store) {
    btnOneFolderOnly.setSelection(store.getDefaultBoolean(FILES_IN_ONE_DIRECTORY_ONLY));
    btnMultipleFolders.setSelection(store.getDefaultBoolean(FILES_IN_MULTIPLE_DIRECTORIES));
    setDirectoryPaths(store.getDefaultString(DIRECTORY_PATHS));
    enableProjectOptions(true);
    super.performDefaults();
  }

  private void setDirectoryPaths(String directoryPaths) {
    List<DirectoryPath> paths = new ArrayList<DirectoryPath>();
    for (String path : split(directoryPaths, COMMA_DELIMITER)) {
      if (isEmpty(path)) continue;
      paths.add(DirectoryPath.parse(path));
    }
    directoryPathsEditor.directoryPaths(unmodifiableList(paths));
  }

  private void enableProjectOptions(boolean enabled) {
    grpResolutionOfImported.setEnabled(enabled);
    btnOneFolderOnly.setEnabled(enabled);
    btnMultipleFolders.setEnabled(enabled);
    directoryPathsEditor.setEnabled(btnMultipleFolders.getSelection() && enabled);
  }

  /** {@inheritDoc} */
  @Override protected void savePreferences(IPreferenceStore store) {
    store.setValue(FILES_IN_ONE_DIRECTORY_ONLY, btnOneFolderOnly.getSelection());
    store.setValue(FILES_IN_MULTIPLE_DIRECTORIES, btnMultipleFolders.getSelection());
    store.setValue(DIRECTORY_PATHS, directoryNames());
  }

  private String directoryNames() {
    List<DirectoryPath> paths = directoryPathsEditor.directoryPaths();
    if (paths.isEmpty()) return "";
    List<String> pathsAsText = new ArrayList<String>();
    for (DirectoryPath path : paths) {
      pathsAsText.add(path.toString());
    }
    return concat(COMMA_DELIMITER, pathsAsText);
  }

  /** {@inheritDoc} */
  @Override protected String preferencePageId() {
    return PREFERENCE_PAGE_ID;
  }
}
